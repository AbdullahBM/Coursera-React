{"ast":null,"code":"import * as ActionTypes from \"./ActionTypes\";\nimport { baseUrl } from \"../shared/baseUrl\";\nexport var fetchLeaders = function fetchLeaders() {\n  return function (dispatch) {\n    dispatch(leadersLoading(true));\n    return fetch(baseUrl + \"leaders\").then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      var errmess = new Error(error.message);\n      throw errmess;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (leaders) {\n      return dispatch(addLeaders(leaders));\n    }).catch(function (error) {\n      return dispatch(leadersFailed(error.message));\n    });\n  };\n};\nexport var leadersLoading = function leadersLoading() {\n  return {\n    type: ActionTypes.LEADERS_LOADING\n  };\n};\nexport var leadersFailed = function leadersFailed(errmess) {\n  return {\n    type: ActionTypes.LEADERS_FAILED,\n    payload: errmess\n  };\n};\nexport var addLeaders = function addLeaders(leaders) {\n  return {\n    type: ActionTypes.ADD_LEADERS,\n    payload: leaders\n  };\n};\nexport var postFeedback = function postFeedback(post) {\n  return function (dispatch) {\n    var newFeedback = {\n      firstname: post.firstname,\n      lastname: post.lastname,\n      email: post.email,\n      telnum: post.telnum,\n      agree: post.agree,\n      contactType: post.contactType,\n      message: post.message\n    };\n    return fetch(baseUrl + \"feedback\", {\n      method: \"POST\",\n      body: JSON.stringify(newFeedback),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"same-origin\"\n    }).then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      throw error;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      return dispatch(addFeedBack(response));\n    }).catch(function (error) {\n      console.log(\"post comments\", error.message);\n      alert(\"Your comment could not be posted\\nError: \" + error.message);\n    });\n  };\n};\nexport var addFeedBack = function addFeedBack(post) {\n  return {\n    type: ActionTypes.ADD_FEEDBACK,\n    payload: post\n  };\n};\nexport var addComment = function addComment(dishId, rating, author, comment) {\n  return {\n    type: ActionTypes.ADD_COMMENT,\n    payload: {\n      dishId: dishId,\n      rating: rating,\n      author: author,\n      comment: comment\n    }\n  };\n};\nexport var fetchDishes = function fetchDishes() {\n  return function (dispatch) {\n    dispatch(dishesLoading(true));\n    return fetch(baseUrl + \"dishes\").then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      var errmess = new Error(error.message);\n      throw errmess;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (dishes) {\n      return dispatch(addDishes(dishes));\n    }).catch(function (error) {\n      return dispatch(dishesFailed(error.message));\n    });\n  };\n};\nexport var dishesLoading = function dishesLoading() {\n  return {\n    type: ActionTypes.DISHES_LOADING\n  };\n};\nexport var dishesFailed = function dishesFailed(errmess) {\n  return {\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n  };\n};\nexport var addDishes = function addDishes(dishes) {\n  return {\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n  };\n};\nexport var fetchComments = function fetchComments() {\n  return function (dispatch) {\n    return fetch(baseUrl + \"comments\").then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      var errmess = new Error(error.message);\n      throw errmess;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (comments) {\n      return dispatch(addComments(comments));\n    }).catch(function (error) {\n      return dispatch(commentsFailed(error.message));\n    });\n  };\n};\nexport var commentsFailed = function commentsFailed(errmess) {\n  return {\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n  };\n};\nexport var addComments = function addComments(comments) {\n  return {\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n  };\n};\nexport var postComment = function postComment(dishId, rating, author, comment) {\n  return function (dispatch) {\n    var newComment = {\n      dishId: dishId,\n      rating: rating,\n      author: author,\n      comment: comment\n    };\n    newComment.date = new Date().toISOString();\n    return fetch(baseUrl + \"comments\", {\n      method: \"POST\",\n      body: JSON.stringify(newComment),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"same-origin\"\n    }).then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      throw error;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      return dispatch(addComment(response));\n    }).catch(function (error) {\n      console.log(\"post comments\", error.message);\n      alert(\"Your comment could not be posted\\nError: \" + error.message);\n    });\n  };\n};\nexport var fetchPromos = function fetchPromos() {\n  return function (dispatch) {\n    dispatch(promosLoading());\n    return fetch(baseUrl + \"promotions\").then(function (response) {\n      console.log(response);\n\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      var errmess = new Error(error.message);\n      throw errmess;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (promos) {\n      return dispatch(addPromos(promos));\n    }).catch(function (error) {\n      return dispatch(promosFailed(error.message));\n    });\n  };\n};\nexport var promosLoading = function promosLoading() {\n  return {\n    type: ActionTypes.PROMOS_LOADING\n  };\n};\nexport var promosFailed = function promosFailed(errmess) {\n  return {\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n  };\n};\nexport var addPromos = function addPromos(promos) {\n  return {\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n  };\n};","map":{"version":3,"sources":["/home/abdulah/Downloads/coursera-React/confusion/Con Fusion/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","fetchLeaders","dispatch","leadersLoading","fetch","then","response","ok","error","Error","status","statusText","errmess","message","json","leaders","addLeaders","catch","leadersFailed","type","LEADERS_LOADING","LEADERS_FAILED","payload","ADD_LEADERS","postFeedback","post","newFeedback","firstname","lastname","email","telnum","agree","contactType","method","body","JSON","stringify","headers","credentials","addFeedBack","console","log","alert","ADD_FEEDBACK","addComment","dishId","rating","author","comment","ADD_COMMENT","fetchDishes","dishesLoading","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","postComment","newComment","date","Date","toISOString","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS"],"mappings":"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","sourcesContent":["import * as ActionTypes from \"./ActionTypes\";\nimport { baseUrl } from \"../shared/baseUrl\";\n\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n\n  return fetch(baseUrl + \"leaders\")\n    .then(\n      response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      }\n    )\n    .then(response => response.json())\n    .then(leaders => dispatch(addLeaders(leaders)))\n    .catch(error => dispatch(leadersFailed(error.message)));\n};\n\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\n\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\n\nexport const postFeedback = post => dispatch => {\n  const newFeedback = {\n    firstname: post.firstname,\n    lastname: post.lastname,\n    email: post.email,\n    telnum: post.telnum,\n    agree: post.agree,\n    contactType: post.contactType,\n    message: post.message\n  };\n\n  return fetch(baseUrl + \"feedback\", {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  })\n    .then(\n      response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        throw error;\n      }\n    )\n    .then(response => response.json())\n    .then(response => dispatch(addFeedBack(response)))\n    .catch(error => {\n      console.log(\"post comments\", error.message);\n      alert(\"Your comment could not be posted\\nError: \" + error.message);\n    });\n};\n\nexport const addFeedBack = post => ({\n  type: ActionTypes.ADD_FEEDBACK,\n  payload: post\n});\n\nexport const addComment = (dishId, rating, author, comment) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  }\n});\n\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n\n  return fetch(baseUrl + \"dishes\")\n    .then(\n      response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      }\n    )\n    .then(response => response.json())\n    .then(dishes => dispatch(addDishes(dishes)))\n    .catch(error => dispatch(dishesFailed(error.message)));\n};\n\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\n\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\n\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + \"comments\")\n    .then(\n      response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      }\n    )\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\n\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\n\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n\n  return fetch(baseUrl + \"comments\", {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  })\n    .then(\n      response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        throw error;\n      }\n    )\n    .then(response => response.json())\n    .then(response => dispatch(addComment(response)))\n    .catch(error => {\n      console.log(\"post comments\", error.message);\n      alert(\"Your comment could not be posted\\nError: \" + error.message);\n    });\n};\n\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n\n  return fetch(baseUrl + \"promotions\")\n    .then(\n      response => {\n        console.log(response);\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      }\n    )\n    .then(response => response.json())\n    .then(promos => dispatch(addPromos(promos)))\n    .catch(error => dispatch(promosFailed(error.message)));\n};\n\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\n\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\n"]},"metadata":{},"sourceType":"module"}